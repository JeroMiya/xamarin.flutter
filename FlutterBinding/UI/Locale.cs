namespace FlutterBinding.UI
{
    /// An identifier used to select a user's language and formatting preferences,
    /// consisting of a language and a country. This is a subset of locale
    /// identifiers as defined by BCP 47.
    ///
    /// Locales are canonicalized according to the "preferred value" entries in the
    /// [IANA Language Subtag
    /// Registry](https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry).
    /// For example, `const Locale('he')` and `const Locale('iw')` are equal and
    /// both have the [languageCode] `he`, because `iw` is a deprecated language
    /// subtag that was replaced by the subtag `he`.
    ///
    /// See also:
    ///
    ///  * [Window.locale], which specifies the system's currently selected
    ///    [Locale].
    /// TODO: Consider dropping this for the .Net Runtime System.Globalization.CultureInfo
    public class Locale
    {
        /// Creates a new Locale object. The first argument is the
        /// primary language subtag, the second is the region subtag.
        ///
        /// For example:
        ///
        /// ```dart
        /// const Locale swissFrench = const Locale('fr', 'CH');
        /// const Locale canadianFrench = const Locale('fr', 'CA');
        /// ```
        ///
        /// The primary language subtag must not be null. The region subtag is
        /// optional.
        ///
        /// The values are _case sensitive_, and should match the case of the relevant
        /// subtags in the [IANA Language Subtag
        /// Registry](https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry).
        /// Typically this means the primary language subtag should be lowercase and
        /// the region subtag should be uppercase.
        public Locale(string languageCode, string countryCode = "")
        {
            _languageCode = languageCode;
            _countryCode  = countryCode;
            // assert(_languageCode != null);
        }

        /// Empty locale constant. This is an invalid locale.
        public static Locale none = new Locale("", "");

        /// The primary language subtag for the locale.
        ///
        /// This must not be null.
        ///
        /// This is expected to be string registered in the [IANA Language Subtag
        /// Registry](https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry)
        /// with the type "language". The string specified must match the case of the
        /// string in the registry.
        ///
        /// Language subtags that are deprecated in the registry and have a preferred
        /// code are changed to their preferred code. For example, `const
        /// Locale('he')` and `const Locale('iw')` are equal, and both have the
        /// [languageCode] `he`, because `iw` is a deprecated language subtag that was
        /// replaced by the subtag `he`.
        public string languageCode => _canonicalizeLanguageCode(_languageCode);

        private readonly string _languageCode;

        private static string _canonicalizeLanguageCode(string languageCode)
        {
            // This switch statement is generated by //flutter/tools/gen_locale.dart
            // Mappings generated for language subtag registry as of 2018-08-08.
            switch (languageCode)
            {
            case "in":  return "id";  // Indonesian; deprecated 1989-01-01
            case "iw":  return "he";  // Hebrew; deprecated 1989-01-01
            case "ji":  return "yi";  // Yiddish; deprecated 1989-01-01
            case "jw":  return "jv";  // Javanese; deprecated 2001-08-13
            case "mo":  return "ro";  // Moldavian, Moldovan; deprecated 2008-11-22
            case "aam": return "aas"; // Aramanik; deprecated 2015-02-12
            case "adp": return "dz";  // Adap; deprecated 2015-02-12
            case "aue": return "ktz"; // =/Kx"au//"ein; deprecated 2015-02-12
            case "ayx": return "nun"; // Ayi (China); deprecated 2011-08-16
            case "bgm": return "bcg"; // Baga Mboteni; deprecated 2016-05-30
            case "bjd": return "drl"; // Bandjigali; deprecated 2012-08-12
            case "ccq": return "rki"; // Chaungtha; deprecated 2012-08-12
            case "cjr": return "mom"; // Chorotega; deprecated 2010-03-11
            case "cka": return "cmr"; // Khumi Awa Chin; deprecated 2012-08-12
            case "cmk": return "xch"; // Chimakum; deprecated 2010-03-11
            case "coy": return "pij"; // Coyaima; deprecated 2016-05-30
            case "cqu": return "quh"; // Chilean Quechua; deprecated 2016-05-30
            case "drh": return "khk"; // Darkhat; deprecated 2010-03-11
            case "drw": return "prs"; // Darwazi; deprecated 2010-03-11
            case "gav": return "dev"; // Gabutamon; deprecated 2010-03-11
            case "gfx": return "vaj"; // Mangetti Dune !Xung; deprecated 2015-02-12
            case "ggn": return "gvr"; // Eastern Gurung; deprecated 2016-05-30
            case "gti": return "nyc"; // Gbati-ri; deprecated 2015-02-12
            case "guv": return "duz"; // Gey; deprecated 2016-05-30
            case "hrr": return "jal"; // Horuru; deprecated 2012-08-12
            case "ibi": return "opa"; // Ibilo; deprecated 2012-08-12
            case "ilw": return "gal"; // Talur; deprecated 2013-09-10
            case "jeg": return "oyb"; // Jeng; deprecated 2017-02-23
            case "kgc": return "tdf"; // Kasseng; deprecated 2016-05-30
            case "kgh": return "kml"; // Upper Tanudan Kalinga; deprecated 2012-08-12
            case "koj": return "kwv"; // Sara Dunjo; deprecated 2015-02-12
            case "krm": return "bmf"; // Krim; deprecated 2017-02-23
            case "ktr": return "dtp"; // Kota Marudu Tinagas; deprecated 2016-05-30
            case "kvs": return "gdj"; // Kunggara; deprecated 2016-05-30
            case "kwq": return "yam"; // Kwak; deprecated 2015-02-12
            case "kxe": return "tvd"; // Kakihum; deprecated 2015-02-12
            case "kzj": return "dtp"; // Coastal Kadazan; deprecated 2016-05-30
            case "kzt": return "dtp"; // Tambunan Dusun; deprecated 2016-05-30
            case "lii": return "raq"; // Lingkhim; deprecated 2015-02-12
            case "lmm": return "rmx"; // Lamam; deprecated 2014-02-28
            case "meg": return "cir"; // Mea; deprecated 2013-09-10
            case "mst": return "mry"; // Cataelano Mandaya; deprecated 2010-03-11
            case "mwj": return "vaj"; // Maligo; deprecated 2015-02-12
            case "myt": return "mry"; // Sangab Mandaya; deprecated 2010-03-11
            case "nad": return "xny"; // Nijadali; deprecated 2016-05-30
            case "ncp": return "kdz"; // Ndaktup; deprecated 2018-03-08
            case "nnx": return "ngv"; // Ngong; deprecated 2015-02-12
            case "nts": return "pij"; // Natagaimas; deprecated 2016-05-30
            case "oun": return "vaj"; // !O!ung; deprecated 2015-02-12
            case "pcr": return "adx"; // Panang; deprecated 2013-09-10
            case "pmc": return "huw"; // Palumata; deprecated 2016-05-30
            case "pmu": return "phr"; // Mirpur Panjabi; deprecated 2015-02-12
            case "ppa": return "bfy"; // Pao; deprecated 2016-05-30
            case "ppr": return "lcq"; // Piru; deprecated 2013-09-10
            case "pry": return "prt"; // Pray 3; deprecated 2016-05-30
            case "puz": return "pub"; // Purum Naga; deprecated 2014-02-28
            case "sca": return "hle"; // Sansu; deprecated 2012-08-12
            case "skk": return "oyb"; // Sok; deprecated 2017-02-23
            case "tdu": return "dtp"; // Tempasuk Dusun; deprecated 2016-05-30
            case "thc": return "tpo"; // Tai Hang Tong; deprecated 2016-05-30
            case "thx": return "oyb"; // The; deprecated 2015-02-12
            case "tie": return "ras"; // Tingal; deprecated 2011-08-16
            case "tkk": return "twm"; // Takpa; deprecated 2011-08-16
            case "tlw": return "weo"; // South Wemale; deprecated 2012-08-12
            case "tmp": return "tyj"; // Tai Mène; deprecated 2016-05-30
            case "tne": return "kak"; // Tinoc Kallahan; deprecated 2016-05-30
            case "tnf": return "prs"; // Tangshewi; deprecated 2010-03-11
            case "tsf": return "taj"; // Southwestern Tamang; deprecated 2015-02-12
            case "uok": return "ema"; // Uokha; deprecated 2015-02-12
            case "xba": return "cax"; // Kamba (Brazil); deprecated 2016-05-30
            case "xia": return "acn"; // Xiandao; deprecated 2013-09-10
            case "xkh": return "waw"; // Karahawyana; deprecated 2016-05-30
            case "xsj": return "suj"; // Subi; deprecated 2015-02-12
            case "ybd": return "rki"; // Yangbye; deprecated 2012-08-12
            case "yma": return "lrr"; // Yamphe; deprecated 2012-08-12
            case "ymt": return "mtm"; // Mator-Taygi-Karagas; deprecated 2015-02-12
            case "yos": return "zom"; // Yos; deprecated 2013-09-10
            case "yuu": return "yug"; // Yugh; deprecated 2014-02-28
            default:    return languageCode;
            }
        }

        /// The region subtag for the locale.
        ///
        /// This can be null.
        ///
        /// This is expected to be string registered in the [IANA Language Subtag
        /// Registry](https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry)
        /// with the type "region". The string specified must match the case of the
        /// string in the registry.
        ///
        /// Region subtags that are deprecated in the registry and have a preferred
        /// code are changed to their preferred code. For example, `const Locale('de',
        /// 'DE')` and `const Locale('de', 'DD')` are equal, and both have the
        /// [countryCode] `DE`, because `DD` is a deprecated language subtag that was
        /// replaced by the subtag `DE`.
        private string countryCode => _canonicalizeRegionCode(_countryCode);

        private readonly string _countryCode;

        private static string _canonicalizeRegionCode(string regionCode)
        {
            // This switch statement is generated by //flutter/tools/gen_locale.dart
            // Mappings generated for language subtag registry as of 2018-08-08.
            switch (regionCode)
            {
            case "BU": return "MM"; // Burma; deprecated 1989-12-05
            case "DD": return "DE"; // German Democratic Republic; deprecated 1990-10-30
            case "FX": return "FR"; // Metropolitan France; deprecated 1997-07-14
            case "TP": return "TL"; // East Timor; deprecated 2002-05-20
            case "YD": return "YE"; // Democratic Yemen; deprecated 1990-08-14
            case "ZR": return "CD"; // Zaire; deprecated 1997-07-14
            default:   return regionCode;
            }
        }

        protected bool Equals(Locale other)
        {
            return
                string.Equals(_languageCode, other._languageCode) &&
                string.Equals(_countryCode, other._countryCode);
        }

        /// <inheritdoc />
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals((Locale)obj);
        }

        /// <inheritdoc />
        public override int GetHashCode()
        {
            unchecked
            {
                return ((_languageCode != null ? _languageCode.GetHashCode() : 0) * 397) ^ (_countryCode != null ? _countryCode.GetHashCode() : 0);
            }
        }

        public static bool operator ==(Locale left, Locale right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Locale left, Locale right)
        {
            return !Equals(left, right);
        }

        public override string ToString()
        {
            return _countryCode == null ? languageCode : $"{languageCode}_{countryCode}";
        }
    }
}